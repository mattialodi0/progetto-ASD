package mnkgame;

import java.util.Random;
import java.util.ArrayList;
import java.util.HashSet;


public class IterativeDeepening  implements MNKPlayer {
	private Random rand;
    private int M;
    private int N;
    private int K;
	private MNKBoard B;
	private MNKGameState myWin;
	private MNKGameState yourWin;
	private int TIMEOUT;
    private boolean first;

	public IterativeDeepening() {
	}

	public void initPlayer(int M, int N, int K, boolean first, int timeout_in_secs) {

        rand    = new Random(System.currentTimeMillis()); 
		this.M  = M;
        this.N  = N;
        this.K  = K;
		B       = new MNKBoard(M,N,K);
		myWin   = first ? MNKGameState.WINP1 : MNKGameState.WINP2; 
		yourWin = first ? MNKGameState.WINP2 : MNKGameState.WINP1;
		TIMEOUT = timeout_in_secs;
        this.first = first;
	}

    public MNKCell selectCell(MNKCell[] FC, MNKCell[] MC) {

		if(MC.length > 0) {
			MNKCell c = MC[MC.length-1]; 
			B.markCell(c.i,c.j);         
		}
        else if(MC.length == 0) {
            //se è la prima mossa mette il simbolo al centro
            int m = M/2;
            int n = N/2;
            MNKCell s = new MNKCell(m, n);
			B.markCell(s.i,s.j);
            return s;
        }

        if(FC.length == 1) {
            return FC[0];
		}
        
        final int max_depth = 9;
        final double min_a = -1.0;
        final double max_b = 1.0;
        int index = 0;

        for(int i=0; i < max_depth; i++) {
            double[] results = new double[FC.length];

            for(int j=0; j < results.length; j++) {
                B.markCell(FC[j].i, FC[j].j);
                results[j] = AlphaBeta(B, first, min_a, max_b, i);
                B.unmarkCell();

                if((results[j] == (first ? -1 : 1))) {  //(first) ? results[j] == -1 : results[j] == 1 //caso di vittoria immediata, 
                    B.markCell(FC[j].i, FC[j].j);                                                               
                   return FC[j];
                }
            }
            if(first) {            
                double min = 1000; 
                for(int j=0; j < results.length; j++) {
                    if(results[j] <= min) {
                       min = results[j];
                      index = j;
                    }
                }
            }
            else {
                
                double max = -1000;
                for(int j=0; j < results.length; j++) {
                    if(results[j] >= max) {
                       max = results[j];
                      index = j;
                    }
                }
            }
        }
        
        B.markCell(FC[index].i, FC[index].j);
        return FC[index];
    }

    public String playerName() {
        return "MiniMax";
    }

    //////////////////

    private double AlphaBeta(MNKBoard B, boolean first_player, double a, double b, int depth) {
        double eval = 0.0;

        if(MNKGameState.WINP1 == B.gameState() ) {  
            eval = -1;                                    
        }
        else if(MNKGameState.WINP2 == B.gameState()) {
            eval = 1;
        }
        else if(MNKGameState.DRAW == B.gameState()) {
            eval = 0;
        }
        else if(depth == 0) {
            eval = 0;   //da aggiungere evaluate
        }
        else if(first_player) {     //B.currentPlayer()==0  //first_player
            eval = -1000;
            //va per ricorsione
            for(MNKCell c : B.getFreeCells()) { 
                B.markCell(c.i, c.j);
                eval = Math.max(eval, AlphaBeta(B, false, a, b, depth-1));
                B.unmarkCell();
                a = Math.max(a, eval);
                if(b <= a) break;
            }
        }
        else {
            eval = 1000;
            //va per ricorsione
            for(MNKCell c : B.getFreeCells()) { 
                B.markCell(c.i, c.j);
                eval = Math.min(eval, AlphaBeta(B, true, a, b, depth-1));
                B.unmarkCell();
                b = Math.min(b, eval);
                if(b <= a) break;
            }
        }

        return eval;        //- (4-depth)/10;     //4 è la prfondità massima
    }

}
