\documentclass{article}
%%%
\usepackage[T1]{fontenc}
%%%
%\usepackage[utf8]{inputenc}
\usepackage[italian]{babel}

\title{Progetto di Algoritmi e Strutture di Dati
\\Dipartimento di Informatica}


\author{Salvatore Lervini: 0001030390\\ Mattia Lodi: 0001030390\\ Federico Vallese: 0000983811}

\date{Settembre 2022}

%\pagenumbering{roman}
%\tableofcontents


\usepackage{natbib}
\usepackage{graphicx}
\usepackage{amssymb}
\usepackage{amsmath}
\usepackage{subfigure}
\usepackage{caption}
\usepackage{color}
\begin{document}



\maketitle
\begin{figure}[h]
	\centering
	{\includegraphics[scale =0.3]{LogoUniboUfficiale.png}}
\end{figure}

\newpage
\tableofcontents



\newpage
\section{Descrizione del problema e obiettivi}
Il progetto consiste nella creazione di un giocatore virtuale capace di trovare la strategia ottima data una qualunque configurazione dell'$(M,N,K)-game$ in un limite di tempo prestabilito.
L'$(M,N,K)-game$ è la generalizzazione del tris, nel quale i due giocatori, a turno, si sfidano in una matrice di dimensioni $M\times N$ al fine di allineare $K$ simboli uguali orizzontalmente, verticalmente o diagonalmente.

\noindent
Data la necessità intrinseca del gioco di valutare le possibili mosse future, sia proprie sia avversarie, in maniera efficiente in relazione al limite di tempo, abbiamo ritenuto che l'algoritmo migliore presente in letteratura fosse l'iterative deepening.
\subsection{L'algoritmo iterative deepening}
L'\textit{iterative deepening} consiste nell'effettuare varie chiamate dell'algoritmo \textit{AlphaBeta Pruning} con profondità crescente.
Il principale miglioramento sta nel fatto che tale ricerca può essere interrotta in relazione al tempo disponibile, al termine del quale è restituita la mossa migliore trovata con l'ultima chiamata.

\noindent
L'\textit{AlphaBeta Pruning} è una versione migliorata dell'algoritmo \textit{MiniMax}, un algoritmo ricorsivo che individua la migliore mossa possibile in un gioco secondo il criterio di \textit{minimizzare la massima perdita possibile}.
Questo criterio consiste nel valutare tutte le possibili continuazioni, e di queste scegliere la migliore per l'avversario in modo da poter rispondere efficacemente. Così facendo è possibile contrastare anche un giocatore con strategia ottima.
Il primo giocatore massimizza, l'altro minimizza.

\noindent
L'algoritmo \textit{MiniMax} è troppo dispendioso di risorse poiché visita sempre l'intero \textit{game tree}(albero che contiene tutte le possibili partite in un gioco a turni) e ciò non è quasi mai possibile in tempi ragionevoli.
Tale problema viene parzialmente risolto dall'\textit{AlphaBeta Pruning} che, avvalendosi dei coefficienti $\alpha$ e $\beta$, riesce a potare in maniera opportuna alcuni rami dell'albero, riducendo quindi la complessità computazionale.
I coefficienti $\alpha$ e $\beta$ sono i parametri che memorizzano la valutazione della configurazione in base alla strategia di cui sopra.
Aggiornando opportunamente tali coefficienti, quando $\alpha$ diventa maggiore o uguale a $\beta$ non si ha più interesse nel visitare gli altri scenari, ciò comporta la suddetta potatura dell'albero.

\newpage

\section{Scelte progettuali}
I nostri obiettivi principali sono stati:
\begin{itemize}
	\item lavorare su un sottinsieme delle possibili mosse
	\item definire una funzione capace di valutare la configurazione corrente in relazione a quale giocatore si trovi in vantaggio, tenendo conto del numero massimo (opportunamente pesato) di simboli allineati.
	\item una gestione accurata delle tempistiche.
\end{itemize}

\subsection{Implementazione di Iterative deepening}
Per ridurre il numero di figli da analizzare creiamo l'array \textit{BC} chiamando la funzione \textit{bestCells}.
Utilizziamo quindi due cicli, quello esterno agisce sulla profondità massima incrementandola, laddove quello interno applica l'algoritmo \textit{AlphaBeta} alle configurazioni di \textit{BC}, riempiendo parallelamente un array di risultati in modo che all' \textit{i}-esimo valore dell'array corrisponda \textit{i}-esima configurazione di \textit{BC}.

\noindent
In caso di possibilità di vittoria immediata si ritorna direttamente la mossa vincente evitando controlli inutili.
Altrimenti, se il tempo sta finendo, grazie all'uso di iterative deepening, si ritorna la cella migliore trovata al ciclo precedente.

\noindent
Una volta riempito l'array di risultati, se il nostro giocatore è primo allora vincerà con $-1$, quindi selezioniamo la cella con valore minore; altrimenti, vincerà con $+1$ e in tal caso andremo quindi a considerare il maggiore di questi.


\subsection{Funzione bestCells}
La funzione \textit{bestCells} riduce il numero di celle da dare in input a \textit{iterative deepening}, che gioca un simbolo in quella cella, valuta tale configurazione e ritira tale mossa per procedere allo stesso modo con la successiva.

\noindent
Per la valutazione di cui sopra, ci avvaliamo di un \textit{array dinamico} per la memorizzazione di queste tramite la funzione \textit{findFreeCells}, che considera le eventuali celle libere adiacenti a quelle marcate negli ultimi $10$ turni.

\noindent
Nel caso in cui \textit{findFreeCells} non trovi celle se ne considerano 3 prese a caso da \textit{FC}, vettore contenente tutte le celle libere.

\noindent
Se il giocatore di cui si sta analizzando il turno si trova ad una mossa dalla vittoria, allora la pone in cima all'array in modo da essere sempre valutata anche in caso di timeout.



\subsection{evaluation e evaluate}
\textit{evaluation} chiama la funzione \textit{evaluate}, una volta per il nostro giocatore ed una volta per l'altro, al fine di restituire un valore compreso tra $-1$ e $1$, che sta ad indicare qual è il giocatore che si trova in vantaggio.
Il valore suddetto è ottenuto usando la funzione arcotangente normalizzata poichè questa è monotona crescente e tende ad $1$ al tendere dell'ascissa a $+\infty$.
\[
-1< {{Math.atan(max\_p2) - Math.atan(max\_p1)}\over{Math.PI / 2}} <1
\]

\noindent
\textit{evaluate} ispeziona la matrice di gioco esaminando le righe, le colonne, le diagonali e le antidiagonali al fine di trovare il numero massimo di simboli allineati dal giocatore preso in analisi.
Facciamo ciò avvalendoci di un array dinamico di tipo streak, una nuova classe da noi creata al fine di memorizzare la lunghezza della fila e il valore dei moltiplicatori ad essa associata.

\noindent
\textit{Evaluate} tollera fino ad una cella libera di fila nella streak e cambia tale valore grazie a due moltiplicatori che dipendono dal fatto che prima e/o dopo ci sia una cella libera o meno.
Facciamo ciò dal momento che tollerare una n-upla, con $n>1$, di celle libere di fila non risulterebbe efficiente poichè, in tal caso, l'avversario potrebbe contrastare facilmente la nostra strategia.

\noindent
La streak è conclusa quando incontriamo:
\begin{itemize}
	\item un muro
	\item un simbolo avversario
	\item almeno due celle vuote di fila
\end{itemize}
Per l'ultimo caso usiamo una variabile booleana inizializzata a \textit{false}.

\noindent
Tali moltiplicatori possono assumere i seguenti valori:
\begin{itemize}
	\item $1$ se la cella è libera
	\item $0.7$ altrimenti
\end{itemize}
Nel caso in cui entrambi i moltiplicatori valgano $0.7$ e la lunghezza della streak sia minore di $K$, allora tale streak non viene considerata.
Quando la lunghezza della streak massima è maggiore o uguale a $K$ e non vi è vittoria allora è certo che siano presenti uno o più celle libere non allineate all'interno. In questo caso, quindi, abbiamo ritenuto opportuno non considerare i suoi moltiplicatori, poichè tale configurazione è per noi molto vantaggiosa dal momento che per vincere basta riempire tali buchi.

%FOTOOOOOOOOOOOOO ESEMPIIIIIIIIIIIIII

\newpage
\subsection{Timeout}
Per ovviare ai limiti di tempo, all'interno di \textit{initPlayer}, in base al numero di celle   della matrice di gioco ($M \times N$), assegnamo una profondità massima che abbiamo empiricamente verificato essere la più adeguata per non causare timeout e ritornare una mossa in tempi ragionevoli.

\section{Costo computazionale}
Chiamando la dimensione dell'input $n:=M\times N$ e $d:=max\_depth$, il costo computazionale totale dell'algoritmo è
\[
O(n^d) + O(n^2) + O(n) + c = O(n^d).
\]
Infatti le funzioni:
\begin{itemize}
	\item \textit{evaluateRows}
	\item \textit{evaluateCols}
	\item \textit{evaluateDiags}
	\item \textit{evaluateAntiDiags}
\end{itemize}
costano $O(n)$ per via dei due cicli \textit{for} annidati all'interno dei quali ci sono solo operazioni di costo costante.

\noindent
La funzione \textit{bestCells} ha, nel caso peggiore, costo $O(n^2)$ per via di un ciclo su tutte le celle libere, a partire da ognuna delle quali è applicata la funzione \textit{isntAlready}, che verifica che tale cella non sia stata già inserita nell'\textit{array}.

\noindent
Il costo totale è dominato asintoticamente dal costo dell'algoritmo \textit{iterative deepening}, che richiama \textit{AlphaBeta} $d$ volte con profondità crescente.
\[
O\Bigg(  \sum_{i=1}^d n^i\Bigg)=O(n^d)
\]




%\newpage



%	\[
	%\centering
	%\includegraphics[width=0.7\linewidth]{LogoUniboUffici%ale.png}
	
	%\label{fig:bytepost}
%	\]


%\newpage

%\begin{figure}[h!]
%	\[
%    \centering
%    \subfigure[]{\includegraphics[scale =0.5]{LogoUniboUfficiale.png}}
%    \]
%\end{figure}




%\section{Conclusioni}





\end{document}
