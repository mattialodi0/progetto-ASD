private double evaluate(MNKCellState[][] B, MNKCellState state) {
        double u_max = 0;
        double u = 0;
        double m1=1.0;
        double m2=1.0;
        double p=0.75;

        //controllo delle colonne
        for(int k=0; k < N; k++) {
            for(int h=0; h < M; h++) {
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[h-1][k] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0){
            			m1=p;
            		}
            	}
            	if (h==M-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[h+1][k] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0) {
            			m2=p;
            		}
            	}
                if(B[h][k] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
              
                else if(u==0 && B[h][k] == MNKCellState.FREE && h-1>=0 && B[h-1][k] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                
                else if(u!=0 && B[h][k] == MNKCellState.FREE && h+1<N && B[h+1][k] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                
                else {
                    u = 0.0;
                }
            }
            u = 0.0;
        }

      //controllo delle righe
        for(int k=0; k < M; k++) {
            for(int h=0; h < N; h++) {
            	
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[k][h-1] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0) {
            			m1=p;
            		}
            	}
            	if (h==N-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[k][h+1] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0){
            			m2=p;
            		}
            	}
            	
                if(B[k][h] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    	}
                    }
                
                else if(u==0 && B[k][h] == MNKCellState.FREE && h-1>=0 && B[k][h-1] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }	
                }
                
                else if(u!=0 && B[k][h] == MNKCellState.FREE && h+1<N && B[k][h+1] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }	
                }
                
                else {
                    u = 0;
                }
            }
            u = 0;
        }
            
     // CONTROLLO DIAGONALE 
     		for (int j = 0; j<N; j++) { // MATRICE TRIANGOLARE SUPERIORE
     			int l = 0;
     			while (l<M && j+l<N) {
     				if (l==0) { //ho appena iniziato a contare
     					u = 0;
     					m1 = p;
     				}
     				else {
     					if (u==0 && B[l-1][j+l-1] == MNKCellState.FREE) {
     						m1=1;
     					}
     					else if(u==0) {
     						m1=p;
     					}
     				}
     				if (l==M-1|| j+l==N-1) {//ho appena finito di contare
     					m2=p;
     				}
     				else {
            			if(u!=0 && B[l+1][j+l+1] == MNKCellState.FREE) { 
            				m2=1;
            			}
            			else if(u!=0){
            				m2=p;
            			}
            		}
     				
     				if (B[l][j+l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				else if(u==0 && B[l][j+l] == MNKCellState.FREE && l>0 && j-l>0 && B[l-1][j+l-1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[l][j+l] == MNKCellState.FREE && l+1<M && j+l+1<N && B[l+1][j+l+1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else {
     					u=0;
     				}
     				l++;
     			}
     		}
     		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE
    			int l=0;
    			while (l<N && i+l<M) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1 = p;
    				}
    				else {
    					if (u==0 && B[i+l-1][l-1] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (i+l == M-1 || l == N-1) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][l+1] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][l] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[i+l][l] == MNKCellState.FREE && i+l>0 && l>0 && B[i+l-1][l-1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[i+l][l] == MNKCellState.FREE && i+l+1<M && l+1<N && B[i+l+1][l+1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
	
     	// CONTROLLO ANTI-DIAGONALE
    		for (int j = N; j>0; j--) { // MATRICE TRIANGOLARE SUPERIORE (ANTI)
    			int l = 0;
    			while (l<M && j-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[l-1][j-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (l==M-1||j-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if (u!=0 && B[l+1][j-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if(u!=0) {
    						m2=p;
    					}
    				}
    				
    				if (B[l][j-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[l][j-l-1] == MNKCellState.FREE && l>0 && j-l<N && B[l-1][j-l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[l][j-l-1] == MNKCellState.FREE && l+1<M && j-l-2>0 && B[l+1][j-l-2] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
    		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE (ANTI)
    			int l = 0;
    			while (l+i<M && N-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u = 0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[i+l-1][N-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if(i+l==M-1|| N-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][N-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][N-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[i+l][N-l-1] == MNKCellState.FREE && i+l>0 && N-l<N && B[i+l-1][N-l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[i+l][N-l-1] == MNKCellState.FREE && i+l+1<M && N-l-2>=0 && B[i+l+1][N-l-2] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
        

        return u_max;
    }
