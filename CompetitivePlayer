package mnkgame;

import java.util.Random;
import java.util.ArrayList;
import java.util.HashSet;


public class CompetitivePlayer  implements MNKPlayer {
	private Random rand;
    private int M;
    private int N;
    private int K;
	private MNKBoard B;
	private MNKGameState myWin;
	private MNKGameState yourWin;
	private int TIMEOUT;
    private boolean first;
    private long start;
    private double timeout;
    private int max_depth;

	public CompetitivePlayer() {
	}

	public void initPlayer(int M, int N, int K, boolean first, int timeout_in_secs) {

        rand    = new Random(System.currentTimeMillis()); 
		this.M  = M;
        this.N  = N;
        this.K  = K;
		B       = new MNKBoard(M,N,K);
		myWin   = first ? MNKGameState.WINP1 : MNKGameState.WINP2; 
		yourWin = first ? MNKGameState.WINP2 : MNKGameState.WINP1;
		TIMEOUT = timeout_in_secs;
        this.first = first;
        this.start = 0;

        //controllo timeout
        final int cells_num = M*N;
        final int cost = 50;
        timeout = cost + (9*49.0)/cells_num;     //assumendo che il minimo di M*N sia 3*3
        
		//controllo iterazioni max
        max_depth = 5;        
		if(cells_num <= 12) max_depth = cells_num;
		//else if(cells_num <= 14)  max_depth = 10;	
		//else if(cells_num <= 18)  max_depth = 9;	
		//else if(cells_num <= 20)  max_depth = 8;
		else if(cells_num <= 20)  max_depth = 7;
		else if(cells_num <= 30)  max_depth = 6;
		else if(cells_num <= 50)  max_depth = 5;
		else if(cells_num <= 600)  max_depth = 4;
		else if(cells_num <= 3000)  max_depth = 3;
		else if(cells_num > 3000)  max_depth = 2;
	}

    public MNKCell selectCell(MNKCell[] FC, MNKCell[] MC) {
        start = System.currentTimeMillis();

		if(MC.length > 0) {
			MNKCell c = MC[MC.length-1]; 
			B.markCell(c.i,c.j);         
		}
        else if(MC.length == 0) {
            //se è la prima mossa mette il simbolo al centro
            int m = M/2;
            int n = N/2;
            MNKCell s = new MNKCell(m, n);
			B.markCell(s.i,s.j);
            return s;
        }

        if(FC.length == 1) {
            //se rimane solo una mossa la fa direttamente
            return FC[0];
		}


        //iterative deepening
        final double min_a = -1.0;
        final double max_b = 1.0;
        int index = 0;
        ArrayList<MNKCell> BC = bestCells(B);

        for(int i=0; i < max_depth; i++) {
            if(timeIsOut()) 
                break;

            double[] results = new double[BC.size()];

            for(int j=0; j < results.length; j++) {
                B.markCell(BC.get(j).i, BC.get(j).j);
                results[j] = AlphaBeta(B, first, min_a, max_b, i);
                B.unmarkCell();

                if((results[j] == (first ? -1 : 1))) {  	//caso di vittoria immediata, 
                    B.markCell(BC.get(j).i, BC.get(j).j);                                                               
                    return BC.get(j);
                }
			    if(timeIsOut())  {
                    //B.markCell(BC.get(index).i, BC.get(index).j);
                    //return BC.get(index);
                    break;
                }
            }
            if(first) {            
                double min = 1000; 
                for(int j=0; j < results.length; j++) {
                    if(results[j] <= min) {
                       min = results[j];
                      index = j;
                    }
                }
            }
            else {
                
                double max = -1000;
                for(int j=0; j < results.length; j++) {
                    if(results[j] >= max) {
                       max = results[j];
                      index = j;
                    }
                }
            }
        }
        
        B.markCell(BC.get(index).i, BC.get(index).j);
        return BC.get(index);
    }

    public String playerName() {
        return "Competitive";
    }

    //////////////////

    private double AlphaBeta(MNKBoard B, boolean first_player, double a, double b, int depth) {
        double eval = 0.0;
        if(timeIsOut()) {
            return evaluation(B);
        }

        if(MNKGameState.WINP1 == B.gameState() ) {  
            eval = -1;                                    
        }
        else if(MNKGameState.WINP2 == B.gameState()) {
            eval = 1;
        }
        else if(MNKGameState.DRAW == B.gameState()) {
            eval = 0;
        }
        else if(depth == 0) {
            eval = evaluation(B);
        }
        else if(first_player) {     //B.currentPlayer()==0  //first_player
            eval = -1000;
			ArrayList<MNKCell> BC = bestCells(B);
            //va per ricorsione
            for(MNKCell c : BC) { 
                B.markCell(c.i, c.j);
                eval = Math.max(eval, AlphaBeta(B, false, a, b, depth-1));
                B.unmarkCell();
                a = Math.max(a, eval);
                if(b <= a) break;
            }
        }
        else {
            eval = 1000;
			ArrayList<MNKCell> BC = bestCells(B);
            //va per ricorsione
            for(MNKCell c : BC) { 
                B.markCell(c.i, c.j);
                eval = Math.min(eval, AlphaBeta(B, true, a, b, depth-1));
                B.unmarkCell();
                b = Math.min(b, eval);
                if(b <= a) break;
            }
        }

        return eval;        
    }

    //ritorna true se il tempo sta per scadere
    private boolean timeIsOut() {
        if((System.currentTimeMillis()-start)/1000.0 > TIMEOUT*(timeout/100.0))
            return true;
        else 
            return false;
    }
   
    //ritorna un valore compreso tra -1 e 1 in base a chi sta vincendo,
    //valutando chi ha più pezzi in fila
    private double evaluation(MNKBoard B) {     
        double max_p1 = 0;
        double max_p2 = 0;

        max_p1 = evaluate(B.B, MNKCellState.P1);
        max_p2 = evaluate(B.B, MNKCellState.P2);

        return (Math.atan(max_p2) - Math.atan(max_p1)) / (Math.PI / 2);  //funzione arcotangente
    }
   
    //considera anche se è stata bloccata o meno
    private double evaluate0(MNKCellState[][] B, MNKCellState state) {
        double u_max = 0;
        double u = 0;
        double m1=1.0;
        double m2=1.0;
        double p=0.75;

        //controllo delle colonne
        for(int k=0; k < N; k++) {
            for(int h=0; h < M; h++) {
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[h-1][k] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0){
            			m1=p;
            		}
            	}
            	if (h==M-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[h+1][k] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0) {
            			m2=p;
            		}
            	}
                if(B[h][k] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                else {
                    u = 0.0;
                }
            }
            u = 0.0;
        }

      //controllo delle righe
        for(int k=0; k < M; k++) {
            for(int h=0; h < N; h++) {
            	
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[k][h-1] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0) {
            			m1=p;
            		}
            	}
            	if (h==N-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[k][h+1] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0){
            			m2=p;
            		}
            	}
            	
                if(B[k][h] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    	}
                   
                    }
                else {
                    u = 0;
                }
            }
            u = 0;
        }
            
     // CONTROLLO DIAGONALE 
     		for (int j = 0; j<N; j++) { // MATRICE TRIANGOLARE SUPERIORE
     			int l = 0;
     			while (l<M && j+l<N) {
     				if (l==0) { //ho appena iniziato a contare
     					u = 0;
     					m1 = p;
     				}
     				else {
     					if (u==0 && B[l-1][j+l-1] == MNKCellState.FREE) {
     						m1=1;
     					}
     					else if(u==0) {
     						m1=p;
     					}
     				}
     				if (l==M-1|| j+l==N-1) {//ho appena finito di contare
     					m2=p;
     				}
     				else {
            			if(u!=0 && B[l+1][j+l+1] == MNKCellState.FREE) { 
            				m2=1;
            			}
            			else if(u!=0){
            				m2=p;
            			}
            		}
     				
     				if (B[l][j+l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				else {
     					u=0;
     				}
     				l++;
     			}
     		}
     		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE
    			int l=0;
    			while (l<N && i+l<M) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1 = p;
    				}
    				else {
    					if (u==0 && B[i+l-1][l-1] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (i+l == M-1 || l == N-1) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][l+1] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][l] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
	
     	// CONTROLLO ANTI-DIAGONALE
    		for (int j = N; j>0; j--) { // MATRICE TRIANGOLARE SUPERIORE (ANTI)
    			int l = 0;
    			while (l<M && j-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[l-1][j-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (l==M-1||j-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if (u!=0 && B[l+1][j-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if(u!=0) {
    						m2=p;
    					}
    				}
    				
    				if (B[l][j-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
    		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE (ANTI)
    			int l = 0;
    			while (l+i<M && N-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u = 0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[i+l-1][N-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if(i+l==M-1|| N-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][N-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][N-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
        

        return u_max;
    }

    //tiene conto anche dei buchi
	private double evaluate1(MNKCellState[][] B, MNKCellState state) {
        double u_max = 0;
        double u = 0;
        double m1=1.0;
        double m2=1.0;
        double p=0.75;

        //controllo delle colonne
        for(int k=0; k < N; k++) {
            for(int h=0; h < M; h++) {
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[h-1][k] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0){
            			m1=p;
            		}
            	}
            	if (h==M-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[h+1][k] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0) {
            			m2=p;
            		}
            	}
                if(B[h][k] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
              
                else if(u==0 && B[h][k] == MNKCellState.FREE && h-1>=0 && B[h-1][k] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                
                else if(u!=0 && B[h][k] == MNKCellState.FREE && h+1<M && B[h+1][k] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                
                else {
                    u = 0.0;
                }
            }
            u = 0.0;
        }

      //controllo delle righe
        for(int k=0; k < M; k++) {
            for(int h=0; h < N; h++) {
            	
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[k][h-1] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0) {
            			m1=p;
            		}
            	}
            	if (h==N-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[k][h+1] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0){
            			m2=p;
            		}
            	}
            	
                if(B[k][h] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    	}
                    }
                
                else if(u==0 && B[k][h] == MNKCellState.FREE && h-1>=0 && B[k][h-1] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }	
                }
                
                else if(u!=0 && B[k][h] == MNKCellState.FREE && h+1<N && B[k][h+1] == state) {
                	u++;
                	if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }	
                }
                
                
                else {
                    u = 0;
                }
            }
            u = 0;
        }
            
     // CONTROLLO DIAGONALE 
     		for (int j = 0; j<N; j++) { // MATRICE TRIANGOLARE SUPERIORE
     			int l = 0;
     			while (l<M && j+l<N) {
     				if (l==0) { //ho appena iniziato a contare
     					u = 0;
     					m1 = p;
     				}
     				else {
     					if (u==0 && B[l-1][j+l-1] == MNKCellState.FREE) {
     						m1=1;
     					}
     					else if(u==0) {
     						m1=p;
     					}
     				}
     				if (l==M-1|| j+l==N-1) {//ho appena finito di contare
     					m2=p;
     				}
     				else {
            			if(u!=0 && B[l+1][j+l+1] == MNKCellState.FREE) { 
            				m2=1;
            			}
            			else if(u!=0){
            				m2=p;
            			}
            		}
     				
     				if (B[l][j+l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u==0 && B[l][j+l] == MNKCellState.FREE && l>0 && j-l>0 && B[l-1][j+l-1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[l][j+l] == MNKCellState.FREE && l+1<M && j+l+1<N && B[l+1][j+l+1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else {
     					u=0;
     				}
     				l++;
     			}
     		}
     		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE
    			int l=0;
    			while (l<N && i+l<M) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1 = p;
    				}
    				else {
    					if (u==0 && B[i+l-1][l-1] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (i+l == M-1 || l == N-1) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][l+1] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][l] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[i+l][l] == MNKCellState.FREE && i+l>0 && l>0 && B[i+l-1][l-1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[i+l][l] == MNKCellState.FREE && i+l+1<M && l+1<N && B[i+l+1][l+1] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
	
     	// CONTROLLO ANTI-DIAGONALE
    		for (int j = N; j>0; j--) { // MATRICE TRIANGOLARE SUPERIORE (ANTI)
    			int l = 0;
    			while (l<M && j-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[l-1][j-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (l==M-1||j-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if (u!=0 && B[l+1][j-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if(u!=0) {
    						m2=p;
    					}
    				}
    				
    				if (B[l][j-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[l][j-l-1] == MNKCellState.FREE && l>0 && j-l<N && B[l-1][j-l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[l][j-l-1] == MNKCellState.FREE && l+1<M && j-l-2>0 && B[l+1][j-l-2] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
    		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE (ANTI)
    			int l = 0;
    			while (l+i<M && N-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u = 0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[i+l-1][N-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if(i+l==M-1|| N-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][N-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][N-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				
    				else if(u==0 && B[i+l][N-l-1] == MNKCellState.FREE && i+l>0 && N-l<N && B[i+l-1][N-l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				
     				else if(u!=0 && B[i+l][N-l-1] == MNKCellState.FREE && i+l+1<M && N-l-2>=0 && B[i+l+1][N-l-2] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
    				
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
        

        return u_max;
    }
    
	private double evaluate(MNKCellState[][] B, MNKCellState state) {
        double max_rows = evaluateRows(B, state);
        double max_cols = evaluateCols(B, state);
        double max_diags = evaluateDiags(B, state);
        double max_antidiags = evaluateAntiDiags(B, state);

		return Math.max(Math.max(max_rows, max_cols),Math.max(max_diags, max_antidiags));
    }

    private double evaluateRows(MNKCellState[][] B, MNKCellState state) {
        ArrayList<Streak> streak_max = new ArrayList<Streak>();
        Streak s = new Streak();
        streak_max.add(s);
        int h = 0;  //contatore per streak_max
        boolean flag;

        for(int i=0; i < M; i++) {
            flag = false;
            for(int j=0; j < N; j++) {
                if(B[i][j] == state) {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count == 0) {
                        if(j-1 >= 0 && B[i][j-1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[i][j] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if(j+1 < N && B[i][j+1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }

        double max = 0;
        for(int k = 0; k < streak_max.size(); k++){
            if(streak_max.get(k).count >= K)
                max = streak_max.get(k).count;
            else if(streak_max.get(k).m1 != 0.7 || streak_max.get(k).m2 != 0.7) {
                if(max < streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2) 
                    max = streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2;
            }
        }
        return max;
    }

    private double evaluateCols(MNKCellState[][] B, MNKCellState state) {
        ArrayList<Streak> streak_max = new ArrayList<Streak>();
        Streak s = new Streak();
        streak_max.add(s);
        int h = 0;  //contatore per streak_max
        boolean flag;

        for(int j=0; j < N; j++) {
            flag = false;
            for(int i=0; i < M; i++) {
                if(B[i][j] == state) {
                    if(flag) 
                    flag = false;
                    if(streak_max.get(h).count == 0) {
                        if(i-1 >= 0 && B[i-1][j] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[i][j] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if(i+1 < M && B[i+1][j] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }
    
        double max = 0;
        for(int k = 0; k < streak_max.size(); k++){
            if(streak_max.get(k).count >= K)
                max = streak_max.get(k).count;
            else if(streak_max.get(k).m1 != 0.7 || streak_max.get(k).m2 != 0.7) {
                if(max < streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2) 
                    max = streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2;
            }
        }
        return max;
    }

    private double evaluateDiags(MNKCellState[][] B, MNKCellState state) {
        ArrayList<Streak> streak_max = new ArrayList<Streak>();
        Streak s = new Streak();
        streak_max.add(s);
        int h = 0;  //contatore per streak_max
        boolean flag;

        //triangolare superiore
        for(int j=0; j < N; j++) {
            flag = false;
            for(int l=0; (l<M && j+l<N); l++) {
                if(B[l][j+l] == state) {
                    if(flag) 
                    flag = false;
                    if(streak_max.get(h).count == 0) {
                        if((l-1>=0 && j+l-1>=0) && B[l-1][j+l-1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[l][j+l] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if((l+1<M && j+l+1<N) && B[l+1][j+l+1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }
        //triangolare inferiore
        for(int i=1; i < M; i++) {
            flag = false;
            for(int l=0; (l<N && i+l<M); l++) {
                if(B[i+l][l] == state) {
                    if(flag) 
                    flag = false;
                    if(streak_max.get(h).count == 0) {
                        if((i+l-1>=0 && l-1>=0) && B[i+l-1][l-1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[i+l][l] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if((i+l+1<M && l+1<N) && B[i+l+1][l+1] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }

        double max = 0;
        for(int k = 0; k < streak_max.size(); k++){
            if(streak_max.get(k).count >= K)
                max = streak_max.get(k).count;
            else if(streak_max.get(k).m1 != 0.7 || streak_max.get(k).m2 != 0.7) {
                if(max < streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2) 
                    max = streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2;
            }
        }
        return max;
    }

    private double evaluateAntiDiags(MNKCellState[][] B, MNKCellState state) {
        ArrayList<Streak> streak_max = new ArrayList<Streak>();
        Streak s = new Streak();
        streak_max.add(s);
        int h = 0;  //contatore per streak_max
        boolean flag;

        //triangolare superiore
        for(int j=N; j > 0; j--) {
            flag = false;
            for(int l=0; (l < M && j-l > 0); l++) {
                if(B[l][j-l-1] == state) {
                    if(flag) 
                    flag = false;
                    if(streak_max.get(h).count == 0) {
                        if((l-1>=0 && j-l<N) && B[l-1][j-l] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[l][j-l-1] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if((l+1<M && j-l-2>0) && B[l+1][j-l-2] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }
        //triangolare inferiore
        for(int i=1; i < M; i++) {
            flag = false;
            for(int l=0; (l+i < M && N-l > 0); l++) {
                if(B[i+l][N-l-1] == state) {
                    if(flag) 
                    flag = false;
                    if(streak_max.get(h).count == 0) {
                        if((i+l-1>=0 && N-l<N) && B[i+l-1][N-l] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m1 = 1;
                            streak_max.set(h, z);
                        }
                    }
                    Streak z = streak_max.get(h);
                    z.count++;
                    streak_max.set(h, z);
                }
                else if(B[i+l][N-l-1] == MNKCellState.FREE) {
                    if(!flag){
                        flag = true;
                        if(streak_max.get(h).count > 0) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                    } 
                    else {
                        if(streak_max.get(h).count > 0) {
                            Streak w = new Streak();
                            streak_max.add(w);
                            h += 1;
                        }
                    }
                }
                else {
                    if(flag) 
                        flag = false;
                    if(streak_max.get(h).count > 0) {
                        if((i+l+1<M && N-l-2>=0) && B[i+l+1][N-l-2] == MNKCellState.FREE) {
                            Streak z = streak_max.get(h);
                            z.m2 = 1;
                            streak_max.set(h, z);
                        }
                        Streak w = new Streak();
                        streak_max.add(w);
                        h += 1;
                    }
                }
            }
            if(streak_max.get(h).count > 0) {
                Streak w = new Streak();
                streak_max.add(w);
                h += 1;
            }
        }

        double max = 0;
        for(int k = 0; k < streak_max.size(); k++){
            if(streak_max.get(k).count >= K)
                max = streak_max.get(k).count;
            else if(streak_max.get(k).m1 != 0.7 || streak_max.get(k).m2 != 0.7) {
                if(max < streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2) 
                    max = streak_max.get(k).count*streak_max.get(k).m1*streak_max.get(k).m2;
            }
        }
        return max;
    }


    private ArrayList<MNKCell> bestCells(MNKBoard B) {

        ArrayList<MNKCell> BC = findFreeCells(B);

        //nel caso in cui non sia stata trovata nessuna cella vuota popola casualmente BC, inutile con findFreeCells1
        if(BC.size() == 0) {
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
        }

        //cerca una mossa per vincere
        for(int i=0; i < BC.size(); i++) {
            if(B.markCell(BC.get(i).i, BC.get(i).j) == myWin) { //se la trova le da la massima priorità
                MNKCell c = BC.get(i);
                BC.set(i, BC.get(0));
                BC.set(0, c);
            }
            B.unmarkCell();
        }

        return BC;
    }

    //riempie BC prendendo le celle libere adiacenti alle ultime 10 mosse;
    private ArrayList<MNKCell> findFreeCells(MNKBoard B) {

        ArrayList<MNKCell> BC = new ArrayList<MNKCell>();
        MNKCell MC[] = B.getMarkedCells();
        final int depth_MC = 10;

        for(int i=0; i < ((MC.length < depth_MC) ? MC.length : depth_MC); i++) {    

            MNKCell c = MC[MC.length-i-1];
            int m = c.i; int n = c.j;

            if(m-1 >= 0 && n-1 >= 0 && B.cellState(m-1, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n-1)){
                    MNKCell d = new MNKCell(m-1, n-1);
                    BC.add(d);
                }
            }
            if(n-1 >= 0 && B.cellState(m, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m, n-1)){
                    MNKCell d = new MNKCell(m, n-1);
                    BC.add(d);
                }
            }
            if(m+1 < M && n-1 >= 0 && B.cellState(m+1, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n-1)){
                    MNKCell d = new MNKCell(m+1, n-1);
                    BC.add(d);
                }
            }
            if(m+1 < M && B.cellState(m+1, n) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n)){
                    MNKCell d = new MNKCell(m+1, n);
                    BC.add(d);
                }
            }
            if(m+1 < M && n+1 < N && B.cellState(m+1, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n+1)){
                    MNKCell d = new MNKCell(m+1, n+1);
                    BC.add(d);
                }
            }
            if(n+1 < N && B.cellState(m, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m, n+1)){
                    MNKCell d = new MNKCell(m, n+1);
                    BC.add(d);
                }
            }
            if(m-1 >= 0 && n+1 < N && B.cellState(m-1, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n+1)){
                    MNKCell d = new MNKCell(m-1, n+1);
                    BC.add(d);
                }
            }
            if( m-1 >= 0 && B.cellState(m-1, n) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n)){
                    MNKCell d = new MNKCell(m-1, n);
                    BC.add(d);
                }
            }
        }

        return BC;
    }
    
    //verifica che una cella di coordinate m, n non sia già presente nell'array dinamico
    private boolean isntAlready(ArrayList<MNKCell> A, int m, int n) {
        for(int i=0; i < A.size(); i++) {
            if(A.get(i).i == m && A.get(i).j == n) return false;
        }
        return true;
    }

}
