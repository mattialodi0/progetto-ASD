package mnkgame;

import java.util.Random;
import java.util.ArrayList;
import java.util.HashSet;


public class CompetitivePlayer  implements MNKPlayer {
	private Random rand;
    private int M;
    private int N;
    private int K;
	private MNKBoard B;
	private MNKGameState myWin;
	private MNKGameState yourWin;
	private int TIMEOUT;
    private boolean first;
    private long start;
    private double timeout;

	public CompetitivePlayer() {
	}

	public void initPlayer(int M, int N, int K, boolean first, int timeout_in_secs) {

        rand    = new Random(System.currentTimeMillis()); 
		this.M  = M;
        this.N  = N;
        this.K  = K;
		B       = new MNKBoard(M,N,K);
		myWin   = first ? MNKGameState.WINP1 : MNKGameState.WINP2; 
		yourWin = first ? MNKGameState.WINP2 : MNKGameState.WINP1;
		TIMEOUT = timeout_in_secs;
        this.first = first;
        this.start = 0;
	}

    public MNKCell selectCell(MNKCell[] FC, MNKCell[] MC) {
        start = System.currentTimeMillis();

		if(MC.length > 0) {
			MNKCell c = MC[MC.length-1]; 
			B.markCell(c.i,c.j);         
		}
        else if(MC.length == 0) {
            //se è la prima mossa mette il simbolo al centro
            int m = M/2;
            int n = N/2;
            MNKCell s = new MNKCell(m, n);
			B.markCell(s.i,s.j);
            return s;
        }

        if(FC.length == 1) {
            return FC[0];
		}

        //controllo timeout
        final int cells_num = M*N;
        final int cost = 50;
        timeout = cost + (9*49.0)/cells_num;     //assumendo che il minimo di M*N sia 3*3
        
		//controllo iterazioni max
        int max_depth = 9;        
		if(cells_num <= 12) max_depth = cells_num;
		//else if(cells_num <= 14)  max_depth = 10;	
		//else if(cells_num <= 18)  max_depth = 9;	
		else if(cells_num <= 20)  max_depth = 8;
		else if(cells_num <= 28)  max_depth = 7;
		else if(cells_num <= 44)  max_depth = 6;
		else if(cells_num <= 50)  max_depth = 5;
		else if(cells_num <= 600)  max_depth = 4;
		else if(cells_num <= 3000)  max_depth = 3;
		else if(cells_num > 3000)  max_depth = 2;

        final double min_a = -1.0;
        final double max_b = 1.0;
        int index = 0;
        ArrayList<MNKCell> BC = bestCells(B);

		//iterative deepening
        for(int i=0; i < max_depth; i++) {
            //timeout
            if((System.currentTimeMillis()-start)/1000.0 > TIMEOUT*(timeout/100.0)) break;

            double[] results = new double[BC.size()];

            for(int j=0; j < results.length; j++) {
                B.markCell(BC.get(j).i, BC.get(j).j);
                results[j] = AlphaBeta(B, first, min_a, max_b, i);
                B.unmarkCell();

                if((results[j] == (first ? -1 : 1))) {  	//caso di vittoria immediata, 
                    B.markCell(BC.get(j).i, BC.get(j).j);                                                               
                    return BC.get(j);
                }
                //timeout
			    if((System.currentTimeMillis()-start)/1000.0 > TIMEOUT*(timeout/100.0)) {
                    //B.markCell(BC.get(index).i, BC.get(index).j);
                    //return BC.get(index);
                    break;
                }
            }
            if(first) {            
                double min = 1000; 
                for(int j=0; j < results.length; j++) {
                    if(results[j] <= min) {
                       min = results[j];
                      index = j;
                    }
                }
            }
            else {
                
                double max = -1000;
                for(int j=0; j < results.length; j++) {
                    if(results[j] >= max) {
                       max = results[j];
                      index = j;
                    }
                }
            }
        }
        
        B.markCell(BC.get(index).i, BC.get(index).j);
        return BC.get(index);
    }

    public String playerName() {
        return "Competitive";
    }

    //////////////////

    private double AlphaBeta(MNKBoard B, boolean first_player, double a, double b, int depth) {
        double eval = 0.0;
        //timeout - ritorna evaluation
        if((System.currentTimeMillis()-start)/1000.0 > TIMEOUT*(timeout/100.0)) {
            return evaluation(B);
        }

        if(MNKGameState.WINP1 == B.gameState() ) {  
            eval = -1;                                    
        }
        else if(MNKGameState.WINP2 == B.gameState()) {
            eval = 1;
        }
        else if(MNKGameState.DRAW == B.gameState()) {
            eval = 0;
        }
        else if(depth == 0) {
            eval = evaluation(B);
        }
        else if(first_player) {     //B.currentPlayer()==0  //first_player
            eval = -1000;
			ArrayList<MNKCell> BC = bestCells(B);
            //va per ricorsione
            for(MNKCell c : BC) { 
                B.markCell(c.i, c.j);
                eval = Math.max(eval, AlphaBeta(B, false, a, b, depth-1));
                B.unmarkCell();
                a = Math.max(a, eval);
                if(b <= a) break;
            }
        }
        else {
            eval = 1000;
			ArrayList<MNKCell> BC = bestCells(B);
            //va per ricorsione
            for(MNKCell c : BC) { 
                B.markCell(c.i, c.j);
                eval = Math.min(eval, AlphaBeta(B, true, a, b, depth-1));
                B.unmarkCell();
                b = Math.min(b, eval);
                if(b <= a) break;
            }
        }

        return eval;        //- (4-depth)/10;     //4 è la prfondità massima
    }

    //helpfulness
    private double evaluationH(MNKBoard B) {
        MNKCell FC[] = B.getFreeCells();
		int weight[] = new int[FC.length];

		for(int i=0; i < FC.length; i++) {
			weight[i] = helpfullness(B, FC[i], first, true) + helpfullness(B, FC[i], first, false);
		}
		
		int max = -1000;	//-INF
		int l = 0;
		for(int i=0; i < FC.length; i++) {
			if(weight[i] > max) {
				max = weight[i];
				l = i;
			}
		}

		return (Math.atan(max)) / (Math.PI / 2);
    }
    
    //evaluate o evaluatep
    private double evaluation(MNKBoard B) {     
        double max_p1 = 0;
        double max_p2 = 0;

        max_p1 = evaluatep(B.B, MNKCellState.P1);
        max_p2 = evaluatep(B.B, MNKCellState.P2);

        return (Math.atan(max_p2) - Math.atan(max_p1)) / (Math.PI / 2);  //funzione arcotangente
    }

    
	private int helpfullness(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int h = 0;

		h += countRow(B, c, first, isMe);
		h += countColumn(B, c, first, isMe);
		if(true)  h += countDiagonal(B, c, first, isMe);		//isDiagonal(c)
		if(true) h += countAntiDiagonal(B, c, first, isMe);		//isAntiDiagonal(c)

		return h;
	}

	private int countRow(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		for(int i=c.j+1; i < N; i++) {
			if(B.B[c.i][i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}
		for(int i=c.j-1; i >= 0; i--) {
			if(B.B[c.i][i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}

        if(isMe) {
            oc++; fc++;
        }
		if(fc >= K) return 1 + oc;
		else return 0;
	}
	private int countColumn(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		for(int i=c.i+1; i < M; i++) {
			if(B.B[i][c.j] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}
		for(int i=c.i-1; i >= 0; i--) {
			if(B.B[i][c.j] == MNKCellState.FREE) fc++;
			if(isMe) {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}

        if(isMe) {
            oc++; fc++;
        }
		if(fc >= K) return 1 + oc;
		else return 0;
	}
	private int countDiagonal(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		int i = 1;
		while(c.i+i < M && c.j+i < N) {
			if(B.B[c.i+i][c.j+i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i+i][c.j+i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i+i][c.j+i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}
		i = 1;
		while(c.i-i >= 0 && c.j-i >= 0) {
			if(B.B[c.i-i][c.j-i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i-i][c.j-i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i-i][c.j-i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}

        if(isMe) {
            oc++; fc++;
        }
		if(fc >= K) return 1 + oc;
		else return 0;
	}
	private int countAntiDiagonal(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		int i = 1;
		while(c.i-i >= 0 && c.j+i < N) {
			if(B.B[c.i-i][c.j+i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i-i][c.j+i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i-i][c.j+i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}
		i = 1;
		while(c.i+i < M && c.j-i >= 0) {
			if(B.B[c.i+i][c.j-i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i+i][c.j-i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i+i][c.j-i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}

        if(isMe) {
            oc++; fc++;
        }
		if(fc >= K) return 1 + oc;
		else return 0;
	}

    
    private double evaluate(MNKCellState[][] B, MNKCellState state) {
        int u_max = 0;
        int u = 0;

        //controllo delle colonne
        for(int k=0; k < N; k++) {
            for(int h=0; h < M; h++) {
                if(B[h][k] == state) {
                    u++;
                    u_max = Math.max(u, u_max);
                }
                else {
                    u = 0;
                }
            }
            u = 0;
        }

        //controllo delle righe
        for(int k=0; k < M; k++) {
            for(int h=0; h < N; h++) {
                if(B[k][h] == state) {
                    u++;
                    u_max = Math.max(u, u_max);
                    }
                else {
                    u = 0;
                }
            }
            u = 0;
        }
            
        //CONTROLLO DIAGONALE 
        for (int j = 0; j<N; j++) { // MATRICE TRIANGOLARE SUPERIORE
        	int l = 0;
        	while (l<M && j+l<N) {
        		if (l==0) {
        			u = 0;
        		}
        		if (B[l][j+l] == state) {
        			u++;
        			u_max = Math.max(u, u_max);
        		}
        		else {
        			u=0;
        		}
        		l++;
        	}
        }
        for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE
        	int l=0;
        	while (l<N && i+l<M) {
        		if (l==0) {
        			u=0;
        		}
        		if (B[i+l][l] == state) {
        			u++;
        			u_max = Math.max(u, u_max);
        		}
        		else {
        			u=0;
        		}
        		l++;
        	}
        }

     	// CONTROLLO ANTI-DIAGONALE
        for (int j = N; j>0; j--) { // MATRICE TRIANGOLARE SUPERIORE (ANTI)
        	int l = 0;
        	while (l<M && j-l>0) {
        		if (l==0) {
        			u=0;
        		}
        		if (B[l][j-l-1] == state) {
        			u++;
        			u_max = Math.max(u, u_max);
        		}
        		else {
        			u=0;
        		}
        		l++;
        	}
        }
        for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE (ANTI)
        	int l = 0;
        	while (l+i<M && N-l>0) {
        		if (l==0) {
        			u = 0;
        		}
        		if (B[i+l][N-l-1] == state) {
        			u++;
        			u_max = Math.max(u, u_max);
        		}
        		else {
        			u=0;
        		}
        		l++;
        	}
        }
        

        return (double)u_max;
    }

    //considera anche se è stata bloccata o meno
    private double evaluatep(MNKCellState[][] B, MNKCellState state) {
        double u_max = 0;
        double u = 0;
        double m1=1.0;
        double m2=1.0;
        double p=0.75;

        //controllo delle colonne
        for(int k=0; k < N; k++) {
            for(int h=0; h < M; h++) {
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[h-1][k] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0){
            			m1=p;
            		}
            	}
            	if (h==M-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[h+1][k] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0) {
            			m2=p;
            		}
            	}
                if(B[h][k] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    }
                }
                else {
                    u = 0.0;
                }
            }
            u = 0.0;
        }

      //controllo delle righe
        for(int k=0; k < M; k++) {
            for(int h=0; h < N; h++) {
            	
            	if (h==0) { //ho appena iniziato a contare
            		m1=p;
            	}
            	else {
            		if(u==0 && B[k][h-1] == MNKCellState.FREE) {
            			m1=1;
            		}
            		else if(u==0) {
            			m1=p;
            		}
            	}
            	if (h==N-1) { //ho appena finito di contare
            		m2=p;
            	}
            	else {
            		if(u!=0 && B[k][h+1] == MNKCellState.FREE) {
                		m2=1;
            		}
            		else if(u!=0){
            			m2=p;
            		}
            	}
            	
                if(B[k][h] == state) {
                    u++;
                    if (m1!=p || m2!=p) {
                    	u_max = Math.max(u*m1*m2, u_max);
                    	}
                   
                    }
                else {
                    u = 0;
                }
            }
            u = 0;
        }
            
     // CONTROLLO DIAGONALE 
     		for (int j = 0; j<N; j++) { // MATRICE TRIANGOLARE SUPERIORE
     			int l = 0;
     			while (l<M && j+l<N) {
     				if (l==0) { //ho appena iniziato a contare
     					u = 0;
     					m1 = p;
     				}
     				else {
     					if (u==0 && B[l-1][j+l-1] == MNKCellState.FREE) {
     						m1=1;
     					}
     					else if(u==0) {
     						m1=p;
     					}
     				}
     				if (l==M-1|| j+l==N-1) {//ho appena finito di contare
     					m2=p;
     				}
     				else {
            			if(u!=0 && B[l+1][j+l+1] == MNKCellState.FREE) { 
            				m2=1;
            			}
            			else if(u!=0){
            				m2=p;
            			}
            		}
     				
     				if (B[l][j+l] == state) {
     					u++;
     					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
     				}
     				else {
     					u=0;
     				}
     				l++;
     			}
     		}
     		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE
    			int l=0;
    			while (l<N && i+l<M) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1 = p;
    				}
    				else {
    					if (u==0 && B[i+l-1][l-1] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (i+l == M-1 || l == N-1) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][l+1] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][l] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
	
     	// CONTROLLO ANTI-DIAGONALE
    		for (int j = N; j>0; j--) { // MATRICE TRIANGOLARE SUPERIORE (ANTI)
    			int l = 0;
    			while (l<M && j-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u=0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[l-1][j-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if (l==M-1||j-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if (u!=0 && B[l+1][j-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if(u!=0) {
    						m2=p;
    					}
    				}
    				
    				if (B[l][j-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
    		for (int i = 1; i<M; i++) { // MATRICE TRIANGOLARE INFERIORE (ANTI)
    			int l = 0;
    			while (l+i<M && N-l>0) {
    				if (l==0) { //ho appena iniziato a contare
    					u = 0;
    					m1=p;
    				}
    				else {
    					if (u==0 && B[i+l-1][N-l] == MNKCellState.FREE) {
    						m1=1;
    					}
    					else if (u==0) {
    						m1=p;
    					}
    				}
    				if(i+l==M-1|| N-l-1==0) { //ho appena finito di contare
    					m2=p;
    				}
    				else {
    					if(u!=0 && B[i+l+1][N-l-2] == MNKCellState.FREE) {
    						m2=1;
    					}
    					else if (u!=0) {
    						m2=p;
    					}
    				}
    				
    				
    				if (B[i+l][N-l-1] == state) {
    					u++;
    					if (m1!=p || m2!=p) {
                        	u_max = Math.max(u*m1*m2, u_max);
                        	}
    				}
    				else {
    					u=0;
    				}
    				l++;
    			}
    		}
        

        return u_max;
    }

    private ArrayList<MNKCell> bestCells0(MNKBoard B) {
        ArrayList<MNKCell> BC = new ArrayList<MNKCell>();
        MNKCell FC[] = B.getFreeCells();

        for(int i=0; i < FC.length; i++) {
            BC.add(FC[i]);
        }

        return BC;
    }

    private ArrayList<MNKCell> bestCells(MNKBoard B) {

        ArrayList<MNKCell> BC = findFreeCells(B);

        //nel caso in cui non sia stata trovata nessuna cella vuota popola casualmente BC, inutile con findFreeCells1
        if(BC.size() == 0) {
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
            BC.add(B.getFreeCells()[rand.nextInt(B.getFreeCells().length)]);
        }

        //cerca una mossa per vincere
        for(int i=0; i < BC.size(); i++) {
            if(B.markCell(BC.get(i).i, BC.get(i).j) == myWin) { //se la trova le da la massima priorità
                MNKCell c = BC.get(i);
                BC.set(i, BC.get(0));
                BC.set(0, c);
            }
            B.unmarkCell();
        }

        //ordina le altre mosse
        //..........

        return BC;
    }

    //verifica che una cella di coordinate m, n non sia già presente nell'array
    private boolean isntAlready(ArrayList<MNKCell> A, int m, int n) {
        for(int i=0; i < A.size(); i++) {
            if(A.get(i).i == m && A.get(i).j == n) return false;
        }
        return true;
    }

    //riempie BC prendendo le celle libere adiacenti alle ultime 5 mosse;
    private ArrayList<MNKCell> findFreeCells(MNKBoard B) {

        ArrayList<MNKCell> BC = new ArrayList<MNKCell>();
        MNKCell MC[] = B.getMarkedCells();
        final int depth_MC = 10;

        for(int i=0; i < ((MC.length < depth_MC) ? MC.length : depth_MC); i++) {    

            MNKCell c = MC[MC.length-i-1];
            int m = c.i; int n = c.j;

            if(m-1 >= 0 && n-1 >= 0 && B.cellState(m-1, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n-1)){
                    MNKCell d = new MNKCell(m-1, n-1);
                    BC.add(d);
                }
            }
            if(n-1 >= 0 && B.cellState(m, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m, n-1)){
                    MNKCell d = new MNKCell(m, n-1);
                    BC.add(d);
                }
            }
            if(m+1 < M && n-1 >= 0 && B.cellState(m+1, n-1) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n-1)){
                    MNKCell d = new MNKCell(m+1, n-1);
                    BC.add(d);
                }
            }
            if(m+1 < M && B.cellState(m+1, n) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n)){
                    MNKCell d = new MNKCell(m+1, n);
                    BC.add(d);
                }
            }
            if(m+1 < M && n+1 < N && B.cellState(m+1, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m+1, n+1)){
                    MNKCell d = new MNKCell(m+1, n+1);
                    BC.add(d);
                }
            }
            if(n+1 < N && B.cellState(m, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m, n+1)){
                    MNKCell d = new MNKCell(m, n+1);
                    BC.add(d);
                }
            }
            if(m-1 >= 0 && n+1 < N && B.cellState(m-1, n+1) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n+1)){
                    MNKCell d = new MNKCell(m-1, n+1);
                    BC.add(d);
                }
            }
            if( m-1 >= 0 && B.cellState(m-1, n) == MNKCellState.FREE) {
                if(isntAlready(BC, m-1, n)){
                    MNKCell d = new MNKCell(m-1, n);
                    BC.add(d);
                }
            }
        }

        return BC;
    }

    //riempie BC prendendo le celle libere con celle occupate adiacenti;
    private ArrayList<MNKCell> findFreeCells1(MNKBoard B) {

        ArrayList<MNKCell> BC = new ArrayList<MNKCell>();
        MNKCell FC[] = B.getFreeCells(); 
        MNKCell MC[] = B.getMarkedCells(); 
      
        for(MNKCell d : FC) {
            if(hasMarkedCellCloseBy(MC, d)) {
                if(isntAlready(BC, d.i, d.j)){
                    BC.add(d);
                }
            }
        } 

        return BC;
    }

    private boolean hasMarkedCellCloseBy(MNKCell MC[], MNKCell c) {

        if(c.i+1 < M && c.j+1 < N) {
            for(MNKCell d : MC) {
                if(d.i == c.i+1 && d.j == c.j+1) return true;
            }
        }
        if(c.i+1 < M) {
            for(MNKCell d : MC) {
                if(d.i == c.i+1 && d.j == c.j) return true;
            }
        }
        if(c.i+1 < M && c.j-1 > 0) {
            for(MNKCell d : MC) {
                if(d.i == c.i+1 && d.j == c.j-1) return true;
            }
        }
        if(c.j-1 > 0) {
            for(MNKCell d : MC) {
                if(d.i == c.i && d.j == c.j-1) return true;
            }
        }
        if(c.i-1 > 0 && c.j-1 > 0) {
            for(MNKCell d : MC) {
                if(d.i == c.i-1 && d.j == c.j-1) return true;
            }
        }
        if(c.i-1 > 0) {
            for(MNKCell d : MC) {
                if(d.i == c.i-1 && d.j == c.j) return true;
            }
        }
        if(c.i-1 > 0 && c.j+1 < M) {
            for(MNKCell d : MC) {
                if(d.i == c.i-1 && d.j == c.j+1) return true;
            }
        }
        if(c.j+1 < M) {
            for(MNKCell d : MC) {
                if(d.i == c.i && d.j == c.j+1) return true;
            }
        }

		return false;	
    }
}
