package mnkgame;

import java.util.Random;


public class HelpfulPlayer implements MNKPlayer {
	private Random rand;
	private MNKBoard B;
	private MNKGameState myWin;
	private MNKGameState yourWin;
	private int TIMEOUT;
	private int M,N,K;
	private boolean first;

	
	public HelpfulPlayer() {
	}


	public void initPlayer(int M, int N, int K, boolean first, int timeout_in_secs) {
		rand    = new Random(System.currentTimeMillis()); 
		B       = new MNKBoard(M,N,K);
		myWin   = first ? MNKGameState.WINP1 : MNKGameState.WINP2; 
		yourWin = first ? MNKGameState.WINP2 : MNKGameState.WINP1;
		TIMEOUT = timeout_in_secs;	
		this.M = M; this.N = N; this.K = K;
		this.first = first;
	}

	public MNKCell selectCell(MNKCell[] FC, MNKCell[] MC) {
		long start = System.currentTimeMillis();

		if(MC.length > 0) {
			MNKCell c = MC[MC.length-1]; // Recover the last move from MC
			B.markCell(c.i,c.j);         // Save the last move in the local MNKBoard
		}
		
		if(FC.length == 1)
			return FC[0];
		

		//se può vincere lo fa
		for(MNKCell d : FC) {
			// If time is running out, select a random cell
			if((System.currentTimeMillis()-start)/1000.0 > TIMEOUT*(99.0/100.0)) {
				MNKCell c = FC[rand.nextInt(FC.length)];
				B.markCell(c.i,c.j);
				return c;
			} else if(B.markCell(d.i,d.j) == myWin) {
				return d;  
			} else {
				B.unmarkCell();
			}
		}
		
		//se l'altro giocatore può vincere alla prossima mossa lo ferma
		int pos1 = rand.nextInt(FC.length); 
		int pos2 = rand.nextInt(FC.length); 
		while(pos1 == pos2) {
			pos2 = rand.nextInt(FC.length); 
		}
		MNKCell c = FC[pos1]; // mossa a caso
		B.markCell(c.i,c.j); 
		for(int k = 0; k < FC.length; k++) {    
			if(k != pos1) {     
			    MNKCell d = FC[k];
			    if(B.markCell(d.i,d.j) == yourWin) {
			    	B.unmarkCell();        
			    	B.unmarkCell();	       
			    	B.markCell(d.i,d.j);   
			    	return d;							 
			    } else {
			    	B.unmarkCell();	       
			    }	
			}
		}
		B.unmarkCell();	
		MNKCell e = FC[pos2]; 
		B.markCell(e.i,e.j); 
		for(int k = 0; k < FC.length; k++) {    
			if(k != pos2) {     
			    MNKCell d = FC[k];
			    if(B.markCell(d.i,d.j) == yourWin) {
			    	B.unmarkCell();        
			    	B.unmarkCell();	       
			    	B.markCell(d.i,d.j);   
			    	return d;							 
			    } else {
			    	B.unmarkCell();	       
			    }	
			}
		}
		B.unmarkCell();	

		//helpfulness
		int weight[] = new int[FC.length];

		for(int i=0; i < FC.length; i++) {
			weight[i] = helpfullness(B, FC[i], first, true) + helpfullness(B, FC[i], first, false);
		}
		
		int max = -1000;	//-INF
		int l = 0;
		for(int i=0; i < FC.length; i++) {
			if(weight[i] > max) {
				max = weight[i];
				l = i;
			}
		}

		B.markCell(FC[l].i, FC[l].j);
		return FC[l];
	}

	public String playerName() {
		return "H3lpfuln355";
	}

	private int helpfullness(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int h = 0;
        B.markCell(c.i,  c.j);

		h += countRow(B, c, first, isMe);
		h += countColumn(B, c, first, isMe);
		if(true)  h += countDiagonal(B, c, first, isMe);		//isDiagonal(c)
		if(true) h += countAntiDiagonal(B, c, first, isMe);		//isAntiDiagonal(c)

        B.unmarkCell();
		return h;
	}

	private int countRow(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		for(int i=c.j; i < N; i++) {
			if(B.B[c.i][i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}
		for(int i=c.j-1; i >= 0; i--) {
			if(B.B[c.i][i] == MNKCellState.FREE) fc++;
			if(isMe) {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i][i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}

		if(fc >= K) return 1 + oc;
		else return 0;
	}

	private int countColumn(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		for(int i=c.i; i < M; i++) {
			if(B.B[i][c.j] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}
		for(int i=c.i-1; i >= 0; i--) {
			if(B.B[i][c.j] == MNKCellState.FREE) fc++;
			if(isMe) {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[i][c.j] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
		}

		if(fc >= K) return 1 + oc;
		else return 0;
	}

	private int countDiagonal(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		int i = 0;
		while(c.i+i < M && c.j+i < N) {
			if(B.B[c.i+i][c.j+i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i+i][c.j+i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i+i][c.j+i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}
		i = 1;
		while(c.i-i >= 0 && c.j-i >= 0) {
			if(B.B[c.i-i][c.j-i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i-i][c.j-i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i-i][c.j-i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}

		if(fc >= K) return 1 + oc;
		else return 0;
	}

	private int countAntiDiagonal(MNKBoard B, MNKCell c, boolean first, boolean isMe) {
		int fc = 0;
		int oc = 0;

		int i = 0;
		while(c.i-i >= 0 && c.j+i < N) {
			if(B.B[c.i-i][c.j+i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i-i][c.j+i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i-i][c.j+i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}
		i = 1;
		while(c.i+i < M && c.j-i >= 0) {
			if(B.B[c.i+i][c.j-i] == MNKCellState.FREE) fc++;
			else if(isMe) {
				if(B.B[c.i+i][c.j-i] == ((first) ? MNKCellState.P1 : MNKCellState.P2)) {
					fc++;
					oc++;
				}
				else break;
			}
			else {
				if(B.B[c.i+i][c.j-i] == ((first) ? MNKCellState.P2 : MNKCellState.P1)) {
					fc++;
					oc++;
				}
				else break;
			}
			i++;
		}

		if(fc >= K) return 1 + oc;
		else return 0;
	}

}
